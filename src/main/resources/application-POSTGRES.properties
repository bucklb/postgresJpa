## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)

# Currently have 3 cuts that I can use (but need to recall how best to keep them distinct)
# 1) H2 in memory - requires nothing up front.  Set up some very basic data for it in data.sql
# 2) Postgres running locally
# 3) Postgres running in docker (different password/port)
#     docker run  --name pg-docker -e POSTGRES_PASSWORD=postgres -d -p 5430:5432 -v c:\data\postgres:/var/lib/postgresql/data  postgres


server.port=8080

# H2 version (use as default for now, or leave for test??)
#spring.datasource.url=jdbc:h2:mem:pg-test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

## Postgres local
spring.datasource.url=jdbc:postgresql://localhost:5432/pg-test
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
## Avoid the irritating (but harmless) exception that gets thrown as postgres hasn't implemented a feature ...
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Postgres docker
#spring.datasource.url=jdbc:postgresql://localhost:5430/postgres
#spring.datasource.username=postgres
#spring.datasource.password=docker
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Common
#spring.jpa.hibernate.ddl-auto = update



